sensor:
  - name: Energy Price
    unit_of_measurement: "USD/kWh"
    state: >-
      {% if states('sensor.smt_usage_monthly')|float(0) >= 2000 %} 0.149
      {% elif states('sensor.smt_usage_monthly')|float(0) < 2000 and states('sensor.smt_usage_monthly')|float(0) > 500 %} 0.151
      {% elif states('sensor.smt_usage_monthly')|float(0) <= 500 %} 0.155
      {% endif %}
  - name: Energy Price Node-RED
    unit_of_measurement: "USD/kWh"
    state: >-
      {% if states('sensor.smt_nodered_usage_monthly')|float(0) >= 2000 %} 0.149
      {% elif states('sensor.smt_nodered_usage_monthly')|float(0) < 2000 and states('sensor.smt_nodered_usage_monthly')|float(0) > 500 %} 0.151
      {% elif states('sensor.smt_nodered_usage_monthly')|float(0) <= 500 %} 0.155
      {% endif %}
  - name: Energy Cost Monthly
    device_class: monetary
    state: "{{ states('sensor.smt_usage_monthly') | float(0) * states('sensor.energy_price') | float(0) | round(2, default=0) }}"
  - name: Energy Cost Daily
    device_class: monetary
    state: "{{ states('sensor.smt_usage_daily') | float(0) * states('sensor.energy_price') | float(0) | round(2, default=0) }}"
  - name: Energy Cost Hourly
    device_class: monetary
    state: "{{ states('sensor.smt_usage_hourly') | float(0) * states('sensor.energy_price') | float(0) | round(2, default=0) }}"
  - name: Energy Cost Monthly NodeRED
    device_class: monetary
    state: "{{ states('sensor.smt_nodered_usage_monthly') | float(0) * states('sensor.energy_price_node_red') | float(0) | round(2, default=0) }}"
  - name: Energy Cost Daily NodeRED
    device_class: monetary
    state: "{{ states('sensor.smt_nodered_usage_daily') | float(0) * states('sensor.energy_price_node_red') | float(0) | round(2, default=0) }}"
  - name: Energy Cost Hourly NodeRED
    device_class: monetary
    state: "{{ states('sensor.smt_nodered_usage_hourly') | float(0) * states('sensor.energy_price_node_red') | float(0) | round(2, default=0) }}"
  - name: "Chuck Vanity Last Movement"
    state: "{{ states('input_datetime.chuck_vanity_last_movement') }}"
  - name: "Chuck Closet Last Movement"
    state: "{{ states('input_datetime.chuck_closet_last_movement') }}"
  - name: "Chuck Shower Last Movement"
    state: "{{ states('input_datetime.chuck_shower_last_movement') }}"
  - name: "Chuck Weight lbs"
    unit_of_measurement: 'lbs'
    state: "{{ (states('sensor.chuck_weight') | float(0) * 2.20462262185) | round(2, default=0) }}"
  - name: "Megabytes Received per Second"
    unit_of_measurement: 'MB/s'
    state: "{{ states('sensor.router_kib_s_received') | float(0) / 1024 | round(0) }}"
  - name: "Megabytes Sent per Second"
    unit_of_measurement: 'MB/s'
    state: "{{ states('sensor.router_kib_s_sent') | float(0) / 1024 | round(0) }}"
  - name: "Router Uptime Relative"
    state: "{{ states('sensor.router_uptime') | int(0) | timestamp_custom('%-dd %-Hh %-Mm %-Ss', false) }}"
